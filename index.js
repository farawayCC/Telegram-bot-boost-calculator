const { Telegraf } = require('telegraf')
const config = require('./config.json');
const bot = new Telegraf(config.token)


const Extra = require('telegraf/extra')
const Markup = require("telegraf/markup");
const Stage = require("telegraf/stage");
const session = require("telegraf/session");
const WizardScene = require("telegraf/scenes/wizard");

const BoostCalc = require('./boostCalculator.js');
const boostCalc = new BoostCalc();

const CalibCalc = require('./calibCalculator.js');
const calibCalc = new CalibCalc();



var lang = 'English'; // or 'Russian'

const buttons = ['üöÄ Boost', 'üéì Coach', '‚öñÔ∏è Calibrate', 'üåé Change Language'] //üöÄ üéì ‚öñÔ∏è üåé
const buttonsRu = ['üöÄ –ë—É—Å—Ç', 'üéì –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '‚öñÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞', 'üåé –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'] //üöÄ üéì ‚öñÔ∏è üåé

//['üöÄ Boost', 'üéì Coach'],
//['‚öñÔ∏è Calibrate', 'üåé Change Language'],

bot.start(ctx => {
    ctx.reply(`ü§ñ: Welcome! Selected language: ${lang} üåé`)
    ctx.reply(`To get more info about this bot, you can use command /help`)

    if (lang === 'Russian') {
      ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
    } else {
      ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
    }
});

// –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞.
const boost = new WizardScene(
      "boost_calculate", // –ò–º—è —Å—Ü–µ–Ω—ã

      (ctx) => {
          if (lang === 'Russian') {
              ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ú–ú–†");
          } else {
              ctx.reply("Please, enter your current MMR");
          }
          return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },

      (ctx) => {
          //TODO: here and for desired mmr check if this is a number
          ctx.wizard.state.currentMMR = ctx.message.text; // store mmr in the state to share data between middlewares
          if (isNaN(ctx.wizard.state.currentMMR)) {
              if (lang === 'Russian') {
                  ctx.reply("–ú—ã –∂–¥–∞–ª–∏ —á–∏—Å–ª–æ");
              } else {
                  ctx.reply("We have been waiting for a number");
              }
              if (lang === 'Russian') {
                  ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
              } else {
                  ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
              }
              return ctx.scene.leave();
          }

          if (lang === 'Russian') {
              ctx.reply("–î–æ —Å–∫–æ–ª—å–∫–∏ –ú–ú–† –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç?");
          } else {
              ctx.reply("How much MMR do you want?");
          }
          return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },

      (ctx) => {
          ctx.wizard.state.desiredMMR = ctx.message.text; // retrieve desired mmr from the message which user entered
          if (isNaN(ctx.wizard.state.desiredMMR)) {
              if (lang === 'Russian') {
                  ctx.reply("–ú—ã –∂–¥–∞–ª–∏ —á–∏—Å–ª–æ");
              } else {
                  ctx.reply("We have been waiting for a number");
              }
              if (lang === 'Russian') {
                  ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
              } else {
                  ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
              }
              return ctx.scene.leave();
          }
          if ((ctx.wizard.state.desiredMMR - ctx.wizard.state.currentMMR) < 0) {
              if (lang === 'Russian') {
                  ctx.reply("–í—ã —É–∫–∞–∑–∞–ª–∏ –∂–µ–ª–∞–µ–º—ã–π –ú–ú–† –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ üòÄ");
              } else {
                  ctx.reply("You've typed desired mmr less than current one üòÄ");
              }
              if (lang === 'Russian') {
                  ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
              } else {
                  ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
              }
              return ctx.scene.leave();
          } else if ((ctx.wizard.state.desiredMMR - ctx.wizard.state.currentMMR) <= 100) {
              if (lang === 'Russian') {
                  ctx.reply("–ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ 100 –ú–ú–† –∏ –±–æ–ª—å—à–µ.");
              } else {
                  ctx.reply("Order should be more than 100 MMR.");
              }
              if (lang === 'Russian') {
                  ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
              } else {
                  ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
              }
              return ctx.scene.leave();
          }

          //const yourMMR = ctx.wizard.state.currentMMR; // retrieve your mmr from
          if (lang === 'Russian') {
              ctx.reply(`–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∏–≥—Ä–∞—Ç—å –≤ –ø–∞—Ç–∏ —Å –±—É—Å—Ç–µ—Ä–æ–º (+${config.price_modificators.party_boost}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)?`, Markup
                            .keyboard([
                                [`ü•Ç–í –ø–∞—Ç–∏ (+${config.price_modificators.party_boost}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, '–° –ø–µ—Ä–µ–¥–∞—á–µ–π –∞–∫–∫–∞—É–Ω—Ç–∞'],
                            ]).oneTime().resize().extra()
                        );
          } else {
              ctx.reply(`Do you want to transfer your account or play in a party with a booster (+${config.price_modificators.party_boost}% of the cost)?`, Markup
                            .keyboard([
                                [`ü•ÇIn party (+${config.price_modificators.party_boost}% of the cost)`, 'Transfer account'],
                            ]).oneTime().resize().extra()
                        );
          }
          return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },

      (ctx) => {
          ctx.wizard.state.party = ctx.message.text.includes(config.price_modificators.party_boost)
          if (ctx.wizard.state.party === true) {
              ctx.wizard.steps[5](ctx)
              ctx.wizard.next();
              if (lang === 'Russian') {
                  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±—É—Å—Ç–µ—Ä üíÅ‚Äç', Markup
                                .keyboard([
                                    [`üåé NA (+${config.price_modificators.serv_NA}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, `üåè SEA (+${config.price_modificators.serv_SEA}% )`, 'üåç EU'],
                                ]).oneTime().resize().extra()
                            );
              } else {
                  ctx.reply('Choose the server for booster to play on üíÅ‚Äç', Markup
                                .keyboard([
                                    [`üåé NA (+${config.price_modificators.serv_NA}% of the cost)`, `üåè SEA (+${config.price_modificators.serv_SEA}%)`, 'üåç EU'],
                                ]).oneTime().resize().extra()
                            );
              }
              return ctx.wizard.next();
          } else {
              if (lang === 'Russian') {
                  ctx.reply(`–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±—É—Å—Ç–µ—Ä —Å—Ç—Ä–∏–º–∏–ª üì∫? (+${config.price_modificators.stream}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, Markup
                                .keyboard([
                                    [`üì∫ –°–æ —Å—Ç—Ä–∏–º–æ–º (+${config.price_modificators.stream}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, '–ù–µ—Ç'],
                                ]).oneTime().resize().extra()
                            );
              } else {
                  ctx.reply(`Do you want booster to stream üì∫ during boost (+${config.price_modificators.stream}% of the cost)?`, Markup
                                .keyboard([
                                    [`üì∫ Yes (+${config.price_modificators.stream}% of the cost)`, 'No'],
                                ]).oneTime().resize().extra()
                            );
              }

              return ctx.wizard.next();
          }
      },

      (ctx) => {
          if (ctx.wizard.state.party === true) {
              ctx.wizard.state.stream = false;
              return ctx.wizard.next();
          } else {
              ctx.wizard.state.stream = ctx.message.text.includes(config.price_modificators.stream)
              if (lang === 'Russian') {
                  ctx.reply(`ü¶∏–•–æ—Ç–∏—Ç–µ, –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–¥–æ –±—É—Å—Ç–∏—Ç—å? (+${config.price_modificators.spec_heroes}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, Markup
                                .keyboard([
                                    [`ü¶∏–î–∞ (+${config.price_modificators.spec_heroes}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, '–ù–µ—Ç'],
                                ]).oneTime().resize().extra()
                            );
              } else {
                  ctx.reply(`ü¶∏Want to pick specific heroes for booster to play on? (+${config.price_modificators.spec_heroes}% cost)`, Markup
                                .keyboard([
                                    [`ü¶∏Yes (+${config.price_modificators.spec_heroes}% of the cost)`, 'No'],
                                ]).oneTime().resize().extra()
                            );
              }
              return ctx.wizard.next();
          }
      },
      (ctx) => {
          if (ctx.wizard.state.party === true) {
              ctx.wizard.state.specificHeroes = false;
              return ctx.wizard.next();
          } else {
              if (ctx.message.text.includes(config.price_modificators.spec_heroes)) { ctx.wizard.state.specificHeroes = true;
              } else {ctx.wizard.state.specificHeroes = false;}
          }
          if (lang === 'Russian') {
              ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±—É—Å—Ç–µ—Ä üíÅ‚Äç', Markup
                            .keyboard([
                                [`üåé NA (+${config.price_modificators.serv_NA}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, `üåè SEA (+${config.price_modificators.serv_SEA}% )`, 'üåç EU'],
                            ]).oneTime().resize().extra()
                        );
          } else {
              ctx.reply('Choose the server for booster to play on üíÅ‚Äç', Markup
                            .keyboard([
                                [`üåé NA (+${config.price_modificators.serv_NA}% of the cost)`, `üåè SEA (+${config.price_modificators.serv_SEA}%)`, 'üåç EU'],
                            ]).oneTime().resize().extra()
                        );
          }
          return ctx.wizard.next();

      },
      (ctx) => {
          if (ctx.message.text.includes(config.price_modificators.serv_NA)) { ctx.wizard.state.region = 'NA'; } else
          if (ctx.message.text.includes(config.price_modificators.serv_SEA)) { ctx.wizard.state.region = 'SEA'; } else
          { ctx.wizard.state.region = 'EU'; }

          if (lang === 'Russian') {
              ctx.reply("üéÅ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
          } else {
              ctx.reply("üéÅ If you have a promo code, please enter it. If not, send any message");
          }
          return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
      },
      (ctx) => {
          ctx.wizard.state.promocode = ctx.message.text;

          var currency = '';
          // TODO: Other currencies
          if (lang === 'Russian') { currency = 'RUB' } else
          { currency = 'USD' }

          const yourMMR = ctx.wizard.state.currentMMR
          const desiredMMR = ctx.wizard.state.desiredMMR

          const calculatedObject = boostCalc.calculate(currency, yourMMR, desiredMMR,
                ctx.wizard.state.party, ctx.wizard.state.region,
                ctx.wizard.state.specificHeroes, ctx.wizard.state.stream, ctx.wizard.state.promocode)

          const result = calculatedObject.result
          const cleanResult = calculatedObject.cleanResult
          const promocodePercent = calculatedObject.promocodePercent


          if ((typeof result === 'string' || result instanceof String) && result === 0) {
              ctx.reply(result);
          } else if (result <= 0) {
              if (lang === 'Russian') {
                  ctx.reply(
                      `‚õîÔ∏è –û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`
                  );
              } else {
                  ctx.reply(
                      `‚õîÔ∏è Error, please check the correctness of the entered data`
                  );
              }
          } else {
              if (lang === 'Russian') {
                  ctx.reply(
                      `üöÄ –ë—É—Å—Ç —Å ${yourMMR} –¥–æ ${desiredMMR} –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å: ${result} ${currency} \n\nüßπ –ë–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –±—É—Å—Ç –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å: ${cleanResult} ${currency}`
                  );
                  if (promocodePercent !== null && promocodePercent != 0)
                      ctx.reply( "–ë—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ "+promocodePercent+"% üéÅ" );//`–ë—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ ${promocodePercent}% üéÅ` );
              } else {
                  ctx.reply(
                      `üöÄ Boost from ${yourMMR} to ${desiredMMR} will cost: ${result} ${currency} \n\nüßπ Without modificators boost will cost: ${cleanResult} ${currency}`
                  );
                  if (promocodePercent !== null && promocodePercent != 0)
                      ctx.reply( "Promocode for "+promocodePercent+"% was applied üéÅ" );//`Promocode for ${promocodePercent}% was applied üéÅ` );
              }
          }
          // After scene actions
          if (lang === 'Russian') {
              ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
          } else {
              ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
          }

          return ctx.scene.leave();
    }
);



const coach = new WizardScene(
  "coach_calculate", // –ò–º—è —Å—Ü–µ–Ω—ã
  (ctx) => {
    if (lang === 'Russian') {
        ctx.reply('–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?', Markup
                      .keyboard([
                          ['–†—É—Å—Å–∫–∏–π', 'English'],
                      ])
                      .oneTime()
                      .resize()
                      .extra()
                  );
    } else {
        ctx.reply('Choose a language for coaching', Markup
                      .keyboard([
                          ['Russian', 'English'],
                      ])
                      .oneTime()
                      .resize()
                      .extra()
                  );
    }
    return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
  },
  (ctx) => {
      if (ctx.message.text.includes('English')) {
          ctx.reply(`üéì Coaching costs ${config.coach_usd}$ per 1 hour`);
      } else {
          ctx.reply(`üéì –û–±—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç ${config.coach_rub} —Ä—É–±–ª–µ–π –∑–∞ 1 —á–∞—Å`);
      }

      // After scene actions
      if (lang === 'Russian') {
          ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup
                        .keyboard([
                            [buttonsRu[0], buttonsRu[1]],
                            [buttonsRu[2], buttonsRu[3]],
                        ])
                        .oneTime()
                        .resize()
                        .extra()
                    );
      } else {
          ctx.reply('Possible Actions:', Markup
                        .keyboard([
                            [buttons[0], buttons[1]],
                            [buttons[2], buttons[3]],
                        ])
                        .oneTime().resize().extra()
                    );
      }
      return ctx.scene.leave();
  }
);



const calibrate = new WizardScene(
  "calibrate_calculate", // –ò–º—è —Å—Ü–µ–Ω—ã
  (ctx) => { //0
    if (lang === 'Russian') {
        ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ—à–ª—ã–π –ú–ú–†. –í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞");
    } else {
        ctx.reply("Please, enter your past MMR. Enter 0 if it is your first calibration");
    }
    return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
  },
  (ctx) => { //1
      ctx.wizard.state.prevMMR = ctx.message.text; // store mmr in the state to share data between middlewares
      if (isNaN(ctx.wizard.state.prevMMR)) {
          if (lang === 'Russian') {
              ctx.reply("–ú—ã –∂–¥–∞–ª–∏ —á–∏—Å–ª–æ");
          } else {
              ctx.reply("We have been waiting for a number");
          }
          if (lang === 'Russian') {
              ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
          } else {
              ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
          }
          return ctx.scene.leave();
      }

      const prevMMR = ctx.wizard.state.prevMMR
      //Data-proove
      if (prevMMR < 0 || prevMMR > config.max_mmr) {
          if (lang === 'Russian') {
              ctx.reply(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ ${config.max_mmr}`);
          } else {
              ctx.reply(`Wrong input data. Should be from 0 to ${config.max_mmr}`);
          }

        if (lang === 'Russian') {
            ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
        } else {
            ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
        }
        return ctx.scene.leave();
      }

      if (lang === 'Russian') {
          ctx.reply("–°–∫–æ–ª—å–∫–æ –∏–≥—Ä –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ (–æ—Ç 3 –¥–æ 10)?");
      } else {
          ctx.reply("How much calibration games needed to be played (from 3 to 10)?");
      }
    return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
  },

  (ctx) => { //2
      ctx.wizard.state.gamesCount = ctx.message.text;
      if (isNaN(ctx.wizard.state.gamesCount)) {
          if (lang === 'Russian') {
              ctx.reply("–ú—ã –∂–¥–∞–ª–∏ —á–∏—Å–ª–æ");
          } else {
              ctx.reply("We have been waiting for a number");
          }
          if (lang === 'Russian') {
              ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
          } else {
              ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
          }
          return ctx.scene.leave();
      }
      const gamesCount = ctx.wizard.state.gamesCount;
      //Data-proove
      if (gamesCount < 3 || gamesCount > 10) {
        if (lang === 'Russian') {
            ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 3 –¥–æ 10');
        } else {
            ctx.reply('Wrong input data. Should be from 3 to 10');
        }

        if (lang === 'Russian') {
            ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
        } else {
            ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
        }
        return ctx.scene.leave();
      }

      if (lang === 'Russian') {
          ctx.reply(`–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∏–≥—Ä–∞—Ç—å –≤ –ø–∞—Ç–∏ —Å –±—É—Å—Ç–µ—Ä–æ–º (+${config.price_modificators.party_boost}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)?`, Markup
                        .keyboard([
                            [`ü•Ç–í –ø–∞—Ç–∏ (+${config.price_modificators.party_boost}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, '–° –ø–µ—Ä–µ–¥–∞—á–µ–π –∞–∫–∫–∞—É–Ω—Ç–∞'],
                        ]).oneTime().resize().extra()
                    );
      } else {
          ctx.reply(`Do you want to transfer your account or play in a party with a booster (+${config.price_modificators.party_boost}% of the cost)?`, Markup
                        .keyboard([
                            [`ü•ÇIn party (+${config.price_modificators.party_boost}% of the cost)`, 'Transfer account'],
                        ]).oneTime().resize().extra()
                    );
      }
      return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
  },

  (ctx) => { //3
      ctx.wizard.state.party = ctx.message.text.includes(config.price_modificators.party_boost)
      if (ctx.wizard.state.party === true) {
          ctx.wizard.steps[5](ctx)
          ctx.wizard.next();
          return ctx.wizard.next();
      } else {
          if (lang === 'Russian') {
              ctx.reply(`–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±—É—Å—Ç–µ—Ä —Å—Ç—Ä–∏–º–∏–ª üì∫? (+${config.price_modificators.stream}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, Markup
                            .keyboard([
                                [`üì∫ –°–æ —Å—Ç—Ä–∏–º–æ–º (+${config.price_modificators.stream}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, '–ù–µ—Ç'],
                            ]).oneTime().resize().extra()
                        );
          } else {
              ctx.reply(`Do you want booster to stream üì∫ during boost (+${config.price_modificators.stream}% of the cost)?`, Markup
                            .keyboard([
                                [`üì∫ Yes (+${config.price_modificators.stream}% of the cost)`, 'No'],
                            ]).oneTime().resize().extra()
                        );
          }

          return ctx.wizard.next();
      }

  },

  (ctx) => { //4
      if (ctx.wizard.state.party === true) {
          ctx.wizard.state.stream = false;
      } else {
          ctx.wizard.state.stream = ctx.message.text.includes(config.price_modificators.stream)
          if (lang === 'Russian') {
              ctx.reply(`ü¶∏–•–æ—Ç–∏—Ç–µ, –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–¥–æ –±—É—Å—Ç–∏—Ç—å? (+${config.price_modificators.spec_heroes}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, Markup
                            .keyboard([
                                [`ü¶∏–î–∞ (+${config.price_modificators.spec_heroes}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, '–ù–µ—Ç'],
                            ]).oneTime().resize().extra()
                        );
          } else {
              ctx.reply(`ü¶∏Want to pick specific heroes for booster to play on? (+${config.price_modificators.spec_heroes}% cost)`, Markup
                            .keyboard([
                                [`ü¶∏Yes (+${config.price_modificators.spec_heroes}% of the cost)`, 'No'],
                            ]).oneTime().resize().extra()
                        );
          }
          return ctx.wizard.next();
      }
      return ctx.wizard.next();
  },
  (ctx) => { //5
      if (ctx.wizard.state.party === true) {
          ctx.wizard.state.specificHeroes = false;
      } else {
          ctx.wizard.state.specificHeroes = ctx.message.text.includes(config.price_modificators.spec_heroes)
      }
      if (lang === 'Russian') {
          ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±—É—Å—Ç–µ—Ä üíÅ‚Äç‚ôÇÔ∏è', Markup
                        .keyboard([
                            [`üåé NA (+${config.price_modificators.serv_NA}% —Å—Ç–æ–∏–º–æ—Å—Ç–∏)`, `üåè SEA (+${config.price_modificators.serv_SEA}% )`, 'üåç EU'],
                        ]).oneTime().resize().extra()
                    );
      } else {
          ctx.reply('Choose the server for booster to play on üíÅ‚Äç‚ôÇÔ∏è', Markup
                        .keyboard([
                            [`üåé NA (+${config.price_modificators.serv_NA}% of the cost)`, `üåè SEA (+${config.price_modificators.serv_SEA}%)`, 'üåç EU'],
                        ]).oneTime().resize().extra()
                    );
      }
      return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
  },
  (ctx) => { //6
      if (ctx.message.text.includes(config.price_modificators.serv_NA)) { ctx.wizard.state.region = 'NA'; } else
      if (ctx.message.text.includes(config.price_modificators.serv_SEA)) { ctx.wizard.state.region = 'SEA'; } else
      { ctx.wizard.state.region = 'EU'; }

      if (lang === 'Russian') {
          ctx.reply("üéÅ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
      } else {
          ctx.reply("üéÅ If you have a promo code, please enter it. If not, send any message");
      }
      return ctx.wizard.next(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
  },
  (ctx) => { //7
      ctx.wizard.state.promocode = ctx.message.text;

      var currency = '';
      // TODO: Other currencies
      if (lang === 'Russian') { currency = 'RUB' } else
      { currency = 'USD' }

      const prevMMR = ctx.wizard.state.prevMMR
      const gamesCount = ctx.wizard.state.gamesCount

      const calculatedObject = calibCalc.calculate(currency, prevMMR, gamesCount,
            ctx.wizard.state.party, ctx.wizard.state.region,
            ctx.wizard.state.specificHeroes, ctx.wizard.state.stream, ctx.wizard.state.promocode)

      const result = calculatedObject.result
      const cleanResult = calculatedObject.cleanResult
      const promocodePercent = calculatedObject.promocodePercent

      if (result <= 0) {
          if (lang === 'Russian') {
              ctx.reply(
                  `‚õîÔ∏è –û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`
              );
          } else {
              ctx.reply(
                  `‚õîÔ∏è Error, please check the correctness of the entered data`
              );
          }
      } else {
          if (lang === 'Russian') {
              ctx.reply(
                  `üöÄ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å ${prevMMR} MMR, ${gamesCount} –∏–≥—Ä –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å: ${result} ${currency} \n\nüßπ –ë–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å: ${cleanResult} ${currency}`
              );
              if (promocodePercent !== null && promocodePercent != 0)
                  ctx.reply( "–ë—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ "+promocodePercent+"% üéÅ" );//`–ë—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ ${promocodePercent}% üéÅ` );
          } else {
              ctx.reply(
                  `üöÄ Calibration from ${prevMMR} MMR, ${gamesCount} games will cost: ${result} ${currency} \n\nüßπ Without modificators calibration will cost: ${cleanResult} ${currency}`
              );
              if (promocodePercent !== null && promocodePercent != 0)
                  ctx.reply( "Promocode for "+promocodePercent+"% was applied üéÅ" );//`Promocode for ${promocodePercent}% was applied üéÅ` );
          }
      }
      // After scene actions
      if (lang === 'Russian') {
          ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup .keyboard([[buttonsRu[0], buttonsRu[1]],[buttonsRu[2], buttonsRu[3]],]).oneTime().resize().extra());
      } else {
          ctx.reply('Possible Actions:', Markup.keyboard([[buttons[0], buttons[1]],[buttons[2], buttons[3]],]).oneTime().resize().extra());
      }

      return ctx.scene.leave();
}

);


// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ü–µ–Ω
const stage = new Stage();

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞
stage.register(boost);
stage.register(coach);
stage.register(calibrate);


bot.use(session());
bot.use(stage.middleware());
bot.command("boost", (ctx) => ctx.scene.enter("boost_calculate"));

bot.command("coach", (ctx) => ctx.scene.enter("coach_calculate"));
bot.command("calibrate", (ctx) => ctx.scene.enter("calibrate_calculate"));



//'üöÄ Boost'
bot.hears(buttons[0], ctx => {
    return ctx.scene.enter("boost_calculate");
})

//'üéì Coach'
bot.hears(buttons[1], ctx => {
    return ctx.scene.enter("coach_calculate");
})

//'‚öñÔ∏è Calibrate'
bot.hears(buttons[2], ctx => {
    return ctx.scene.enter("calibrate_calculate");
})

//'üåé Change Language'
bot.hears(buttons[3], ctx => {
    return ctx.reply('Select a language', Markup
                  .keyboard([
                      ['üá∑üá∫', 'üá∫üá∏'],
                  ])
                  .oneTime()
                  .resize()
                  .extra()
              );
})

bot.hears(buttonsRu[0], ctx => {
    return ctx.scene.enter("boost_calculate");
})

bot.hears(buttonsRu[1], ctx => {
    return ctx.scene.enter("coach_calculate");
})

bot.hears(buttonsRu[2], ctx => {
    return ctx.scene.enter("calibrate_calculate");
})

bot.hears(buttonsRu[3], ctx => {
    return ctx.reply('Select a language', Markup
                  .keyboard([
                      ['üá∑üá∫', 'üá∫üá∏'],
                  ])
                  .oneTime()
                  .resize()
                  .extra()
              );
})


bot.hears('üá∑üá∫', ctx => {
    lang = 'Russian';
    ctx.reply('–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π');
    return ctx.reply('–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:', Markup
                  .keyboard([
                      [buttonsRu[0], buttonsRu[1]],
                      [buttonsRu[2], buttonsRu[3]],
                  ])
                  .oneTime()
                  .resize()
                  .extra()
              );
})
bot.hears('üá∫üá∏', ctx => {
    lang = 'English';
    ctx.reply('Language changed to english');
    return ctx.reply('Possible Actions:', Markup
                  .keyboard([
                      ['üöÄ Boost', 'üéì Coach'],
                      ['‚öñÔ∏è Calibrate', 'üåé Change Language'],
                  ])
                  .oneTime()
                  .resize()
                  .extra()
              );
})

bot.command('help', (ctx) => {
    ctx.reply(`Here you can get information about the cost of üöÄ Boost, üéì Training and ‚öñÔ∏è Calibration from the CalibrateYourMom portal. \n \n üåé Long live Belarus! üåé \n \n The /start command restarts the bot for you`);
    ctx.reply(`–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ üöÄ –ë—É—Å—Ç–∞, üéì –û–±—É—á–µ–Ω–∏—è –∏ ‚öñÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–µ –æ—Ç –ø–æ—Ä—Ç–∞–ª–∞ –ö–∞–ª–ò–ë—Ä–æ–≤–∫–∞–¢–≤–æ–µ–π–ú–∞–º—ã. \n \n üåé–ñ—ã–≤–µ –ë–µ–ª–∞—Ä—É—Å—å!üåé \n \n –ö–æ–º–∞–Ω–¥–∞ /start –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è –≤–∞—Å`);
})

bot.launch()
